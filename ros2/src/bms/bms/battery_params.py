import numpy as np
from scipy.interpolate import interp1d

class BatteryParameters:
    def __init__(self):
        # SOC breakpoints (35 points from 0 to 1)
        self.soc_bp = np.array([
            0.0, 0.02941225486521637, 0.058824117602975678, 0.088234411830912074,
            0.11764544129782739, 0.14705916664099683, 0.17647249985671409,
            0.20588441161041271, 0.23529446075872762, 0.26470632349653733,
            0.29411823525027914, 0.32352867652607242, 0.35293995107270271,
            0.38235014726883843, 0.41176029444904005, 0.44117318652141591,
            0.47058406894053362, 0.499995196439295, 0.52940931390989365,
            0.55882098058390717, 0.58823308840130228, 0.61764500015497259,
            0.64705848041845848, 0.676470686267719, 0.70588284310105109,
            0.73529245110594532, 0.76470269631794507, 0.794116372645157,
            0.82352598065004556, 0.85293740224440528, 0.88234784352013151,
            0.91176201000661383, 0.94117691173195439, 0.97059034297941116, 1.0
        ])

        # OCV table (Open Circuit Voltage) [V]
        self.ocv_data = np.array([
            11.752391930195678, 11.833322582740049, 11.90371280791882,
            11.965139959216454, 12.028986538595934, 12.084628842590067,
            12.14181741678707, 12.196094314814118, 12.245734791002235, 12.30382544243438,
            12.358777190557541, 12.423025535620173, 12.477014755585477,
            12.533807528951268, 12.581739651537347, 12.641493452761409,
            12.698566399009771, 12.748487707139224, 12.803656292580287,
            12.857705819017156, 12.913385665848981, 12.965942365524132,
            13.006653559166399, 13.065629493277934, 13.110532716204975,
            13.164051379589417, 13.204274071040635, 13.255367871098075,
            13.303253359407229, 13.352845040458794, 13.400354727913175,
            13.449028887411073, 13.499288785741127, 13.549973944152651,
            13.603600034043087
        ])
        
        # R0 table (Internal resistance) [Ohm]
        self.r0_data = np.array([
            0.050069844681340424, 0.041904703373515408, 0.03787979512703317,
            0.0353295575208982, 0.034768522775992038, 0.03347105454219626,
            0.032457520736920445, 0.029550098167598175, 0.029676439498957354,
            0.029523871677831742, 0.028501368955396129, 0.029899363920681377,
            0.028472723355681361, 0.028048295868951335, 0.027720165358504925,
            0.026974293474711364, 0.026619981571201976, 0.025648155449648949,
            0.026329839763468216, 0.026243164976109505, 0.025814034423029548,
            0.027507166115636979, 0.025457820437030189, 0.025878229506240233,
            0.025445838422525915, 0.02664585892992221, 0.025623749701666844,
            0.026449286067842224, 0.027363383349576345, 0.027491216239835806,
            0.028847058896266695, 0.028855840425666329, 0.030882326062073313,
            0.030575013007330364, 0.0422316590697775
        ])
        
        # R1 table (RC1 resistance) [Ohm]
        self.r1_data = np.array([
            0.023961448807314635, 0.019300253505865634, 0.018182191429851065,
            0.017940480658659413, 0.017037332527253465, 0.016618645304613891,
            0.016814086129977927, 0.018585069942774257, 0.0168778135125633,
            0.017323918014840262, 0.018001315967208616, 0.016562008536808243,
            0.018713440192542917, 0.019274939047455593, 0.018689450627682215,
            0.020347202628628779, 0.021280510767310253, 0.021746150198118562,
            0.020588646144785082, 0.021369296043966056, 0.022716796122052151,
            0.021887185125313978, 0.023162164752836525, 0.02458796091815052,
            0.024886552404649862, 0.024867505056743559, 0.025471094035619975,
            0.026777417085006847, 0.027788441126983705, 0.028985042461533377,
            0.029273463058736321, 0.030842381368584342, 0.033613352298185087,
            0.038249660572232259, 0.060521506007137321
        ])

        # R2 table (RC2 resistance) [Ohm]
        self.r2_data = np.array([
            0.036024521658213529, 0.023693895457392037, 0.022946757441339061,
            0.020545738529068998, 0.019118473043076841, 0.018216194609726205,
            0.016252925213986889, 0.014738432756230137, 0.015957204084883672,
            0.013990145676357472, 0.013860891482647224, 0.014166818466555041,
            0.014016758041444786, 0.014333780228640444, 0.014115069989856184,
            0.014329119685692794, 0.014259455083309551, 0.017247710550003896,
            0.014357569664125262, 0.016310714592833557, 0.016574366626685495,
            0.016872431558289856, 0.017188913981521343, 0.016394155199406013,
            0.016522894555580155, 0.01639520704830906, 0.019841101224699793,
            0.017819739135302094, 0.018699997887797651, 0.01826023680869655,
            0.021583674279299941, 0.024233001572325982, 0.029351600579741739,
            0.026212874122750692, 0.0095038939896146778
        ])
        
        # C1 table (RC1 capacitance) [F]
        self.c1_data = np.array([
            417.35163692547769, 416.44323136064065, 409.37161027185391,
            422.25330819640504, 376.85447719559261, 382.71292958132, 381.72004074385,
            339.15070998622775, 380.51227063310159, 381.74539520857468,
            383.63112639168128, 430.22049884944721, 442.19395536742576,
            372.3475650118537, 420.32401735032988, 449.04755995764492, 452.676511094215,
            505.38742676631642, 582.01097399593016, 540.2872646351442, 501.0639775316701,
            607.54290156138757, 595.21526653037768, 542.00137963484633,
            575.53679741300971, 612.35741891982411, 624.142009883439, 651.68403131943785,
            706.9446699007018, 699.18497322108158, 811.47147413534469,
            802.98330428311885, 868.82292944492315, 880.19710789516569,
            556.28557243238788
        ])

        # C2 table (RC2 capacitance) [F]
        self.c2_data = np.array([
            12914.894027843002, 20156.257436004336, 21199.774972295098,
            24730.313156393575, 26734.567142465075, 29006.6514254877, 31830.583617949527,
            35625.675004574485, 32572.97079447933, 38002.005449767777,
            40178.316233577752, 29816.765617664481, 37437.206029554305,
            37619.026257878875, 38093.176498646448, 36296.606419406628,
            37973.617113031178, 32030.270422738024, 38100.601737412224, 31869.9465575038,
            30719.975744355972, 30581.009083851644, 30043.208676128848,
            29253.887933004597, 28944.809209406656, 28248.15643939154,
            23424.806866886582, 25564.811606239738, 25292.837318269736,
            24085.028780077955, 22737.502054183809, 17388.274157834017,
            14798.354829708966, 16482.447360677055, 45460.557364424996
        ])
        
        # OCV derivative table (dV0/dSOC) [V]
        self.dv0_data = np.array([ 
            0.0, 2.7515963300073754, 2.3932596791431209, 
            2.0886275676659287, 2.170837965780859, 1.8917122311082935, 
            1.9443078340554634, 1.8454053065837381, 1.6878746423638957, 
            1.9750755655971592, 1.8683500951334702, 2.184542029143659, 
            1.8356640709230987, 1.9310572764303029, 1.6297817991997809, 
            2.0315513713179469, 1.9405383842295931, 1.6973612498043873, 
            1.8755818696993889, 1.8376900240278951, 1.8930927078573749, 
            1.7869188550313195, 1.3840998507342832, 2.0051516847729998, 
            1.5266892251898407, 1.8197679947156982, 1.3676421655541544, 
            1.7370763004613397, 1.6282259967964983, 1.6861368258743108, 
            1.6154020610902264, 1.654786292185656, 1.7086543004410633, 
            1.7231977454485539, 1.8234177247593835
        ])

        # Create 1D interpolators for each parameter
        self.interpolators = {
            'ocv': interp1d(self.soc_bp, self.ocv_data, kind='linear', 
                           bounds_error=False, fill_value='extrapolate'),
            'r0': interp1d(self.soc_bp, self.r0_data, kind='linear', 
                          bounds_error=False, fill_value='extrapolate'),
            'r1': interp1d(self.soc_bp, self.r1_data, kind='linear', 
                          bounds_error=False, fill_value='extrapolate'),
            'r2': interp1d(self.soc_bp, self.r2_data, kind='linear', 
                          bounds_error=False, fill_value='extrapolate'),
            'c1': interp1d(self.soc_bp, self.c1_data, kind='linear', 
                          bounds_error=False, fill_value='extrapolate'),
            'c2': interp1d(self.soc_bp, self.c2_data, kind='linear', 
                          bounds_error=False, fill_value='extrapolate'),
            'dv0': interp1d(self.soc_bp, self.dv0_data, kind='linear', 
                           bounds_error=False, fill_value='extrapolate')
        }
    

    def lookup(self, param, soc):
        soc = np.clip(soc, 0, 1)
        return float(self.interpolators[param](soc))
    