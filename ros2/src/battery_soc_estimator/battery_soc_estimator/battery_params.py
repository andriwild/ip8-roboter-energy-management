import numpy as np

class BatteryParameters:
    def __init__(self):
        # SOC breakpoints (33 points from 0 to 1)
        self.soc_bp = np.array([
            0.0, 0.031247298433158988, 0.062495013493485074, 0.093746321963189883,
            0.12499830745205798, 0.15624883474581708, 0.18749946619639946,
            0.21875155584209371, 0.25000276015504297, 0.2812511001561715,
            0.31250147121477279, 0.34375356086049769, 0.37500101552892162,
            0.406252896861069, 0.43750144517574385, 0.46875067050957753,
            0.500000781176155, 0.53124886078526068, 0.56249626337520886,
            0.59374538455224846, 0.62499523482684294, 0.65624659537501939,
            0.68749654980654173, 0.71874869153060594, 0.74999750023719525,
            0.78124943364758481, 0.81249933600061164, 0.84374856133449971,
            0.874999869804286, 0.90625018878453523, 0.93749842462873045,
            0.96874952478474563, 1.0
        ])

        # OCV table (Open Circuit Voltage) [V]
        self.ocv_data = np.array([
            11.91735939605401, 11.986709217102121, 12.041560055571159,
            12.094805679708541, 12.148288492202887, 12.202076412867626,
            12.252546235708648, 12.303751688602722, 12.352906643386675,
            12.418317918921211, 12.457545512680804, 12.513802470829415,
            12.564382835774175, 12.613422733030802, 12.661149641874957,
            12.709108428684027, 12.757146934468004, 12.804764348699408,
            12.849651676233389, 12.891746699716311, 12.939940970871415,
            12.977150862813712, 13.025157923807072, 13.0672679657654, 
            13.113169318809735, 13.155799785981554, 13.211377884190183, 
            13.294759580929345, 13.369793940398555, 13.440564003292625, 
            13.489687105981488, 13.551621327653461, 13.551300020961705 
        ])
        
        # R0 table (Internal resistance) [Ohm]
        self.r0_data = np.array([
            0.023147004732297517, 0.024986149294343382, 0.023630866463983123,
            0.023996753180822533, 0.023761867001212189, 0.023660723994610729,
            0.023407490838042732, 0.022587222409369334, 0.022228610907163323,
            0.023646789459244116, 0.024431957473016231, 0.023698242972811284,
            0.02281419571961122, 0.02300435932603212, 0.02392307673804453,
            0.0241609756944779, 0.024234633484610843, 0.0245582225726574,
            0.024454283158911089, 0.024153965807126917, 0.02437462552597762,
            0.024126684262047445, 0.023517543585317439, 0.023338156754473722,
            0.023565969615923072, 0.023739745606815854, 0.023426330361761165,
            0.02345934873080107, 0.023203599719284224, 0.0229201102334413,
            0.024783704054196942, 0.025632216921500386, 0.032159953000747643
        ])
        
        # R1 table (RC1 resistance) [Ohm]
        self.r1_data = np.array([
            0.010742991559393083, 0.011364171915000821, 0.012272693748284453,
            0.011673737936964256, 0.011880604116698477, 0.012231405602962469,
            0.012582851359289837, 0.013552968394599456, 0.014107131173779796,
            0.013595201212592516, 0.013376889000138885, 0.015253346135214046,
            0.016615254566982093, 0.016931057190218327, 0.016641347760793596,
            0.0172135001441399, 0.01778758735373466, 0.018350784885055996,
            0.019278315003022194, 0.018436409638299546, 0.01873182049942209,
            0.0185548507168031, 0.019413270016777305, 0.019744877294985343,
            0.020408190667853588, 0.020540618277274866, 0.020988212551424135,
            0.02063091276053897, 0.020221619491770475, 0.020636700072007949,
            0.020278866555031111, 0.023024504428506322, 0.028235431132031596
        ])

        # R2 table (RC2 resistance) [Ohm]
        self.r2_data = np.array([
            0.011018901000410029, 0.012119725989850621, 0.010809907640309348,
            0.010564844742293664, 0.010828739554974541, 0.010102131512681869,
            0.010157158341161213, 0.010242453246342396, 0.0098140274626254062,
            0.010603712660173008, 0.010702472397388595, 0.0096023282155427835,
            0.0096456806790567139, 0.010151632804372247, 0.010756320143219786,
            0.010404215411496545, 0.010690191393854883, 0.011473115217045356,
            0.010611249307583741, 0.011665432031547242, 0.01121687897226026,
            0.012681983079198213, 0.012320614469352485, 0.012803979916627361,
            0.01309352959552992, 0.013094849313067956, 0.013160596265299883,
            0.013335544309895773, 0.012343141113420556, 0.011656666904391726,
            0.012505660237211554, 0.014372964132693088, 0.00079079466321255512
        ])
        
        # C1 table (RC1 capacitance) [F]
        self.c1_data = np.array([
            500.20693291049361, 648.68188151379945, 582.45811011289084,
            620.26838704174884, 645.30627117516758, 631.29500429623147,
            649.01112919304455, 634.86465530838427, 602.27825913914785, 
            549.045406686517, 991.00651869317267, 681.91508695433868, 
            572.56678879498065, 577.1686059694631, 684.3782831221622, 
            725.101005856975, 736.68940671998268, 765.14806418629428, 
            768.427258117509, 885.9461163278404, 854.199473698987,
            966.52155119051338, 970.52642302547838, 980.34902444085378,
            978.49411749399655, 1031.1837550663829, 1007.744039362995,
            961.37298092423214, 962.5205974206325, 865.99820924904691,
            1142.7889330500871, 1098.0018947858232, 895.36261623873781
        ])

        # C2 table (RC2 capacitance) [F]
        self.c2_data = np.array([
            31950.954903498085, 41811.641865079531, 44292.785735376521,
            46550.436691444695, 46239.216995710696, 49178.991781931072,
            48944.327247633169, 49214.130648044556, 50986.109668861114,
            37799.696701943241, 48349.038553200975, 53531.6614649833, 
            52676.935194293175, 50818.82890528116, 48500.683946846388, 
            51955.738013536386, 50868.334444538632, 47609.809792474691, 
            51092.855920306283, 52512.201032834608, 46671.64645594715, 
            43515.54055266847, 44818.832661558932, 41384.834832553483, 
            41731.888792622842, 41116.476258302704, 41168.059785476267, 
            37143.539399142042, 36218.651301993945, 30906.539033880756, 
            30783.787619190225, 23731.532523470752, 431328.74011569226
        ])
        
        # OCV derivative table (dV0/dSOC) [V]
        self.dv0_data = np.array([ 
            0.0, 2.2193861397796129, 1.7553551791913282, 1.7037886330103205,
            1.7113412686498515, 1.7211844190379679, 1.6150016975122945,
            1.6384649306523589, 1.5728979367231961, 2.0932720116388364,
            1.2552680954102151, 1.8001022903217658, 1.6187035226223718,
            1.5691822433160751, 1.5273320335889395, 1.5347192225320716,
            1.5372267412593368, 1.5238508998654727, 1.4365138799863311,
            1.3470786344497749, 1.5422240660872932, 1.190664703539378,
            1.5362281919020757, 1.3474289963910779, 1.4688992939003371,
            1.3640905543989865, 1.7785046999753626, 2.6682804404990716,
            2.400998970707211, 2.2646188968118359, 1.5720280317197077,
            1.9818253233574958, -0.010281657784172409
        ])

        # Create parameter dictionaries for easy lookup
        self.parameters = {
            'ocv': (self.soc_bp, self.ocv_data),
            'r0': (self.soc_bp, self.r0_data),
            'r1': (self.soc_bp, self.r1_data),
            'r2': (self.soc_bp, self.r2_data),
            'c1': (self.soc_bp, self.c1_data),
            'c2': (self.soc_bp, self.c2_data),
            'dv0': (self.soc_bp, self.dv0_data)
        }

    def _interpolate_linear(self, x_points, y_points, x_query):
        """
        Simple linear interpolation without scipy dependency
        """
        x_query = np.clip(x_query, x_points[0], x_points[-1])
        
        # Find the two closest points
        if x_query <= x_points[0]:
            return y_points[0]
        if x_query >= x_points[-1]:
            return y_points[-1]
        
        # Find the interval containing x_query
        for i in range(len(x_points) - 1):
            if x_points[i] <= x_query <= x_points[i + 1]:
                # Linear interpolation between points i and i+1
                x0, x1 = x_points[i], x_points[i + 1]
                y0, y1 = y_points[i], y_points[i + 1]
                
                # Interpolation formula: y = y0 + (y1 - y0) * (x - x0) / (x1 - x0)
                return y0 + (y1 - y0) * (x_query - x0) / (x1 - x0)
        
        # Fallback (should not reach here)
        return y_points[-1]

    def lookup(self, param, soc):
        """
        Lookup battery parameter for given SOC using linear interpolation
        """
        soc = np.clip(soc, 0, 1)
        
        if param not in self.parameters:
            raise ValueError(f"Unknown parameter: {param}")
        
        x_points, y_points = self.parameters[param]
        return float(self._interpolate_linear(x_points, y_points, soc))

    def get_all_params(self, soc):
        """
        Get all battery parameters for given SOC
        """
        return {
            'ocv': self.lookup('ocv', soc),
            'r0': self.lookup('r0', soc),
            'r1': self.lookup('r1', soc),
            'r2': self.lookup('r2', soc),
            'c1': self.lookup('c1', soc),
            'c2': self.lookup('c2', soc),
            'dv0_dsoc': self.lookup('dv0', soc)
        }